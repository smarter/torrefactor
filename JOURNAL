Semaine 1 (21/02):
- Réflexion sur la structure du programme.
- Système de compilation basé sur un Makefile fais à la main mis en place.
- Début d'implémentation des classes Torrent, PeerManager, Peer.
- Prototype d'interface graphique en Qt avec QtJambi.
- Peer: support initial du protocole d'échange entre Peers.
- PeerManager: support des announces classiques.
- Implémentation d'un décodeur Bencode avec tests unitaires (JUnit).
- Support des pairs de clés RSA avec test unitaires.
- Création et utilisation d'un dépôt SVN sur polysvn.epfl.ch.

Semaine 2 (28/02):
- Choix du modèle "un thread par connexion" après recherches des avantages
  et inconvénients, notamment:
  <http://paultyma.blogspot.com/2008/03/writing-java-multithreaded-servers.html>
- Suppression de l'utilisation des classes hérités de 'Reader' et 'Writer'
  de Java en faveur de celles hérités de 'InputStream' et 'OutputStream'
  après découverte des problèmes d'éncodages qui y sont liés.
- PeerManager: support des announces 'compacts' et de la clé announce-list
- Écriture des classes DataManager, DataBlock, PieceManager, intégrées dans le
  dépôt la semaine suivante (voir Semaine 3).

Semaine 3 (07/03):
- Passage de SVN à GIT sur un serveur privé.
- Nouveau Makefile généré par l'outil 'mmake'.
- Nouvelles classes DataManager, DataBlock: gestion de l'écriture sur le disque
  en passant par des fichiers mappés en mémoire virtuelle, avec tests unitaires
- Nouvelle classe PieceManager avec tests unitaires: gestion de la réception des
  blocks par les peers pour savoir qu'est-ce qui a déjà été téléchargé. Gestion
  du check SHA-1 des pièces.
- Meilleure gestion des threads et classes plus "thread-safe" suite à la lecture
  d'une partie du livre "Java Concurrency in Pratice".
- Ajout d'un répertoire 3rdparty pour contenir les jars utilisés
- Ajout d'un répertoire data pour les données de tests.
- Nouvelles classes Tracker, HttpTracker, UdpTracker: modularisation de
  fonctions auparavant assurées par la classe PeerManager (sauf le support
  UDP qui est nouveau).

Semaine 4 (14/03):
- Ajout d'une classe Pair immutable pour gérer des paires d'éléments de types
  différents avec support des generics.
- Ajout d'une file d'attente pour les requêtes aux paires.
- Système pour éviter de demander le même bloc à plusieurs paires différent.
  (Ce système est a perfectionner)

Semaine 5 (21/03):
- Support du tracker de l'EPFL alors que d'autres trackers fonctionnaient
  avant.
- Support du multifichier.
- Peer id au format Azureus
- En cours: reprise des téléchargements lors de l'ouverture du
  programme (à l'aide de la serialisation des objects).

Semaine 6 (28/03):
- Reprise des téléchargements fonctionne.
- Queue des requêtes aux peers correctement gérée.
- Utilise des long à la place des int pour le bencode.
- Plus de problèmes lors de la réception de message provenant des peers.

Semaine 7 (04/04):
- Modularisation: la structure de données gérant les blocs (ajout-suppression
  overlap) est maintenant dans la classe IntervalMap.
- Nouvelle classe SawToothIntervalMap pour la gestion des blocs demandés mais
  par encore récupérés. (Évite de demander la même chose à plusieurs peers
  simultanémant)
- Gestion correcte des variables contenant le nombre d'octet téléchargé et
  envoyé par peer.
- En cours: classe pour la gestion des logs.
